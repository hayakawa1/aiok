generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  username              String?   @unique
  bio                   String?
  stripeCustomerId      String?   // 支払いを行うユーザー用
  stripeConnectAccountId String?  // 支払いを受け取るユーザー用
  hourlyRate            Int?
  accounts              Account[]
  sessions              Session[]
  requestsAsSender      Request[] @relation("sender")
  requestsAsReceiver    Request[] @relation("receiver")
  pricePlans            PricePlan[]
}

model Request {
  id          Int      @id @default(autoincrement())
  senderId    String
  receiverId  String
  title       String
  description String
  amount      Int
  status      String   @default("PENDING")
  files       RequestFile[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sender      User     @relation("sender", fields: [senderId], references: [id])
  receiver    User     @relation("receiver", fields: [receiverId], references: [id])
}

model RequestFile {
  id        Int      @id @default(autoincrement())
  requestId Int
  fileName  String
  fileUrl   String
  createdAt DateTime @default(now())
  request   Request  @relation(fields: [requestId], references: [id])
}

model PricePlan {
  id          Int      @id @default(autoincrement())
  userId      String
  title       String
  description String
  amount      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
} 